// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Arius.Core.BehaviorTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Archive File")]
    public partial class ArchiveFileFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Archive_File.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Archive File", @"Link to a feature: [Calculator](Arius.Core.BehaviorTests/Features/Calculator.feature)
***Further read***: **[Learn more about how to generate Living Documentation](https://docs.specflow.org/projects/specflow-livingdoc/en/latest/LivingDocGenerator/Generating-Documentation.html)**

// Cucumber Expressions: https://docs.specflow.org/projects/specflow/en/latest/Bindings/Cucumber-Expressions.html
// TODO: Living Documentation
// TODO: with SpecFlow v4 - CucumberExpressions.SpecFlow.3-9 is no longer needed as nuget

/*
	PRINCIPLES
		No checks on 'total' pointerfileentries, chunks, ... --> test on additinoal ones
*/", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Archive one file")]
        [NUnit.Framework.CategoryAttribute("archive")]
        [NUnit.Framework.CategoryAttribute("file")]
        [NUnit.Framework.TestCaseAttribute("f01.txt", "BELOW_ARCHIVE_TIER_LIMIT", "Cool", "Cool", "HYDRATED", null)]
        [NUnit.Framework.TestCaseAttribute("f02.txt", "ABOVE_ARCHIVE_TIER_LIMIT", "Cold", "Cold", "HYDRATED", null)]
        [NUnit.Framework.TestCaseAttribute("f03.txt", "BELOW_ARCHIVE_TIER_LIMIT", "Archive", "Cold", "HYDRATED", null)]
        [NUnit.Framework.TestCaseAttribute("f04.txt", "ABOVE_ARCHIVE_TIER_LIMIT", "Archive", "Archive", "NOT_HYDRATED", null)]
        public async System.Threading.Tasks.Task ArchiveOneFile(string relativeName, string size, string toTier, string actualChunkTier, string hydratedStatus, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "archive",
                    "file"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("RelativeName", relativeName);
            argumentsOfScenario.Add("Size", size);
            argumentsOfScenario.Add("ToTier", toTier);
            argumentsOfScenario.Add("ActualChunkTier", actualChunkTier);
            argumentsOfScenario.Add("HydratedStatus", hydratedStatus);
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Archive one file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 17
 await testRunner.GivenAsync(string.Format("a BinaryFile \"{0}\" of size \"{1}\"", relativeName, size), ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 18
 await testRunner.WhenAsync(string.Format("archived to the {0} tier", toTier), ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
 await testRunner.ThenAsync("1 additional Chunk", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 20
 await testRunner.ThenAsync("1 additional Binary", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 21
 await testRunner.ThenAsync("1 additional PointerFileEntry", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 22
 await testRunner.ThenAsync("0 additional ChunkList", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 23
 await testRunner.ThenAsync(string.Format("BinaryFile \"{0}\" has a PointerFile and the PointerFileEntry is marked as exists", relativeName), ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 24
 await testRunner.ThenAsync(string.Format("the Chunk for BinaryFile \"{0}\" are in the {1} tier and are {2} and have OriginalL" +
                            "ength {3}", relativeName, actualChunkTier, hydratedStatus, size), ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Archive one file deduplicated")]
        [NUnit.Framework.CategoryAttribute("archive")]
        [NUnit.Framework.CategoryAttribute("dedup")]
        [NUnit.Framework.TestCaseAttribute("df10.txt", "BELOW_CHUNKSIZE_LIMIT", "Cool", "1", "1", "0", "Cool", "Cool", "HYDRATED", null)]
        [NUnit.Framework.TestCaseAttribute("df11.txt", "APPROX_TEN_CHUNKS", "Cool", "MORE_THAN_ONE", "1", "1", "Cool", "NULL", "HYDRATED", null)]
        [NUnit.Framework.TestCaseAttribute("df12.txt", "APPROX_TEN_CHUNKS", "Archive", "MORE_THAN_ONE", "1", "1", "Cold", "NULL", "HYDRATED", null)]
        public async System.Threading.Tasks.Task ArchiveOneFileDeduplicated(string relativeName, string size, string toTier, string additionalChunks, string additionalBinaries, string additionalChunkLists, string actualChunkTier, string chunkEntryTier, string hydratedStatus, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "archive",
                    "dedup"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("RelativeName", relativeName);
            argumentsOfScenario.Add("Size", size);
            argumentsOfScenario.Add("ToTier", toTier);
            argumentsOfScenario.Add("AdditionalChunks", additionalChunks);
            argumentsOfScenario.Add("AdditionalBinaries", additionalBinaries);
            argumentsOfScenario.Add("AdditionalChunkLists", additionalChunkLists);
            argumentsOfScenario.Add("ActualChunkTier", actualChunkTier);
            argumentsOfScenario.Add("ChunkEntryTier", chunkEntryTier);
            argumentsOfScenario.Add("HydratedStatus", hydratedStatus);
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Archive one file deduplicated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 35
 await testRunner.GivenAsync(string.Format("a BinaryFile \"{0}\" of size \"{1}\"", relativeName, size), ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
 await testRunner.WhenAsync(string.Format("deduplicated and archived to the {0} tier", toTier), ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
 await testRunner.ThenAsync(string.Format("\"{0}\" additional Chunks", additionalChunks), ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 38
 await testRunner.ThenAsync(string.Format("\"{0}\" additional Binaries", additionalBinaries), ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 39
 await testRunner.ThenAsync(string.Format("{0} additional ChunkLists", additionalChunkLists), ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 40
 await testRunner.ThenAsync("1 additional PointerFileEntry", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 41
 await testRunner.ThenAsync(string.Format("the Chunks for BinaryFile \"{0}\" are in the {1} tier and are {2} and have Original" +
                            "Length {3}", relativeName, actualChunkTier, hydratedStatus, size), ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 42
 await testRunner.ThenAsync(string.Format("the ChunkEntry for BinaryFile \"{0}\" is in the {1} tier", relativeName, chunkEntryTier), ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ReArchive a deduplicated file")]
        [NUnit.Framework.CategoryAttribute("dedup")]
        public async System.Threading.Tasks.Task ReArchiveADeduplicatedFile()
        {
            string[] tagsOfScenario = new string[] {
                    "dedup"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("ReArchive a deduplicated file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 53
 await testRunner.GivenAsync("a BinaryFile \"df20.txt\" of size \"APPROX_TEN_CHUNKS\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 54
 await testRunner.WhenAsync("deduplicated and archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
 await testRunner.ThenAsync("\"MORE_THAN_ONE\" additional Chunks", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 56
 await testRunner.ThenAsync("1 additional Binary", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 57
 await testRunner.ThenAsync("1 additional PointerFileEntry", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 59
 await testRunner.GivenAsync("a BinaryFile \"df21.txt\" duplicate of BinaryFile \"df20.txt\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 60
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 62
 await testRunner.ThenAsync("0 additional Chunks", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 63
 await testRunner.ThenAsync("0 additional Binaries", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 64
 await testRunner.ThenAsync("1 additional PointerFileEntry", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 67
 await testRunner.GivenAsync("a BinaryFile \"df22.txt\" of size \"APPROX_TEN_CHUNKS\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 68
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 69
 await testRunner.ThenAsync("1 additional Chunks", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 70
 await testRunner.ThenAsync("1 additional Binaries", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 71
 await testRunner.ThenAsync("1 additional PointerFileEntry", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 73
 await testRunner.GivenAsync("a BinaryFile \"df23.txt\" duplicate of BinaryFile \"df22.txt\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 74
 await testRunner.WhenAsync("deduplicated and archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 76
 await testRunner.ThenAsync("0 additional Chunks", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 77
 await testRunner.ThenAsync("0 additional Binaries", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 78
 await testRunner.ThenAsync("1 additional PointerFileEntry", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Undelete a file")]
        [NUnit.Framework.CategoryAttribute("archive")]
        [NUnit.Framework.CategoryAttribute("file")]
        [NUnit.Framework.CategoryAttribute("undelete")]
        public async System.Threading.Tasks.Task UndeleteAFile()
        {
            string[] tagsOfScenario = new string[] {
                    "archive",
                    "file",
                    "undelete"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Undelete a file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 84
 await testRunner.GivenAsync("a BinaryFile \"File20.txt\" of size \"BELOW_ARCHIVE_TIER_LIMIT\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 85
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 86
 await testRunner.ThenAsync("BinaryFile \"File20.txt\" has a PointerFile and the PointerFileEntry is marked as e" +
                        "xists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 88
 await testRunner.WhenAsync("BinaryFile \"File20.txt\" and its PointerFile are deleted", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 89
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 90
 await testRunner.ThenAsync("0 additional Chunks", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 91
 await testRunner.ThenAsync("0 additional Binaries", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 92
 await testRunner.ThenAsync("the PointerFileEntry for BinaryFile \"File20.txt\" is marked as deleted", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 94
 await testRunner.WhenAsync("BinaryFile \"File20.txt\" is undeleted", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 95
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 96
 await testRunner.ThenAsync("BinaryFile \"File20.txt\" has a PointerFile and the PointerFileEntry is marked as e" +
                        "xists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 97
 await testRunner.ThenAsync("0 additional Chunks", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 98
 await testRunner.ThenAsync("0 additional Binaries", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Archive a duplicate file that was already archived")]
        [NUnit.Framework.CategoryAttribute("archive")]
        [NUnit.Framework.CategoryAttribute("file")]
        [NUnit.Framework.CategoryAttribute("duplicate")]
        public async System.Threading.Tasks.Task ArchiveADuplicateFileThatWasAlreadyArchived()
        {
            string[] tagsOfScenario = new string[] {
                    "archive",
                    "file",
                    "duplicate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Archive a duplicate file that was already archived", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 102
 await testRunner.GivenAsync("a BinaryFile \"File30.txt\" of size \"1 KB\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 103
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 104
 await testRunner.ThenAsync("1 additional Chunk", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 105
 await testRunner.ThenAsync("1 additional Binary", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 107
 await testRunner.GivenAsync("a BinaryFile \"File31.txt\" duplicate of BinaryFile \"File30.txt\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 108
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 109
 await testRunner.ThenAsync("0 additional Chunks", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 110
 await testRunner.ThenAsync("0 additional Binaries", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 111
 await testRunner.ThenAsync("BinaryFile \"File30.txt\" has a PointerFile and the PointerFileEntry is marked as e" +
                        "xists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 112
 await testRunner.ThenAsync("BinaryFile \"File31.txt\" has a PointerFile and the PointerFileEntry is marked as e" +
                        "xists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Archive duplicate files")]
        [NUnit.Framework.CategoryAttribute("archive")]
        [NUnit.Framework.CategoryAttribute("file")]
        [NUnit.Framework.CategoryAttribute("duplicate")]
        public async System.Threading.Tasks.Task ArchiveDuplicateFiles()
        {
            string[] tagsOfScenario = new string[] {
                    "archive",
                    "file",
                    "duplicate"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Archive duplicate files", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 115
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 116
 await testRunner.GivenAsync("a BinaryFile \"File40.txt\" of size \"1 KB\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 117
 await testRunner.GivenAsync("a BinaryFile \"File41.txt\" duplicate of BinaryFile \"File40.txt\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 118
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 119
 await testRunner.ThenAsync("1 additional Chunk", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 120
 await testRunner.ThenAsync("1 additional Binary", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 121
 await testRunner.ThenAsync("BinaryFile \"File40.txt\" has a PointerFile and the PointerFileEntry is marked as e" +
                        "xists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 122
 await testRunner.ThenAsync("BinaryFile \"File41.txt\" has a PointerFile and the PointerFileEntry is marked as e" +
                        "xists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 124
 await testRunner.GivenAsync("a BinaryFile \"File42.txt\" duplicate of BinaryFile \"File41.txt\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 125
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 126
 await testRunner.ThenAsync("0 additional Chunks", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 127
 await testRunner.ThenAsync("0 additional Binaries", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 128
 await testRunner.ThenAsync("BinaryFile \"File42.txt\" has a PointerFile and the PointerFileEntry is marked as e" +
                        "xists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Archive a duplicate PointerFile")]
        public async System.Threading.Tasks.Task ArchiveADuplicatePointerFile()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Archive a duplicate PointerFile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 133
 await testRunner.GivenAsync("a BinaryFile \"File50.txt\" of size \"1 KB\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 134
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 135
 await testRunner.GivenAsync("a Pointer of BinaryFile \"File51.txt\" duplicate of the Pointer of BinaryFile \"File" +
                        "50.txt\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 136
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 138
 await testRunner.ThenAsync("0 additional Chunks", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 139
 await testRunner.ThenAsync("0 additional Binaries", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 140
 await testRunner.ThenAsync("BinaryFile \"File50.txt\" has a PointerFile and the PointerFileEntry is marked as e" +
                        "xists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 141
 await testRunner.ThenAsync("a PointerFileEntry for a BinaryFile \"File51.txt\" is marked as exists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Rename BinaryFile with PointerFile")]
        public async System.Threading.Tasks.Task RenameBinaryFileWithPointerFile()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Rename BinaryFile with PointerFile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 145
 await testRunner.GivenAsync("a BinaryFile \"File60.txt\" of size \"1 KB\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 146
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 147
 await testRunner.WhenAsync("BinaryFile \"File60.txt\" and its PointerFile are moved to \"subdir 1\\File61.txt\"", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 148
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 150
 await testRunner.ThenAsync("0 additional Chunks", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 151
 await testRunner.ThenAsync("0 additional Binaries", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 152
 await testRunner.ThenAsync("the PointerFileEntry for BinaryFile \"File60.txt\" is marked as deleted", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 153
 await testRunner.ThenAsync("a PointerFileEntry for a BinaryFile \"subdir 1\\File61.txt\" is marked as exists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Rename BinaryFile only")]
        public async System.Threading.Tasks.Task RenameBinaryFileOnly()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Rename BinaryFile only", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 157
 await testRunner.GivenAsync("a BinaryFile \"File70.txt\" of size \"1 KB\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 158
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 159
 await testRunner.WhenAsync("BinaryFile \"File70.txt\" is moved to \"subdir 2\\File71.txt\"", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 160
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 162
 await testRunner.ThenAsync("0 additional Chunks", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 163
 await testRunner.ThenAsync("0 additional Binaries", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 164
 await testRunner.ThenAsync("a PointerFileEntry for a BinaryFile \"File70.txt\" is marked as exists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 165
 await testRunner.ThenAsync("a PointerFileEntry for a BinaryFile \"subdir 2\\File71.txt\" is marked as exists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Archive with RemoveLocal")]
        public async System.Threading.Tasks.Task ArchiveWithRemoveLocal()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Archive with RemoveLocal", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 168
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 169
 await testRunner.GivenAsync("a BinaryFile \"File8.txt\" of size \"1 KB\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 170
 await testRunner.WhenAsync("archived to the Cool tier with option RemoveLocal", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 172
 await testRunner.ThenAsync("BinaryFile \"File8.txt\" no longer exists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 173
 await testRunner.ThenAsync("BinaryFile \"File8.txt\" has a PointerFile and the PointerFileEntry is marked as ex" +
                        "ists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Rename PointerFile that no longer has a BinaryFile")]
        public async System.Threading.Tasks.Task RenamePointerFileThatNoLongerHasABinaryFile()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Rename PointerFile that no longer has a BinaryFile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 176
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 177
 await testRunner.GivenAsync("a BinaryFile \"File90.txt\" of size \"1 KB\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 178
 await testRunner.WhenAsync("archived to the Cool tier with option RemoveLocal", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 180
 await testRunner.WhenAsync("the PointerFile for BinaryFile \"File90.txt\" is moved to \"subdir 2\\File91.txt\"", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 181
 await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 183
 await testRunner.ThenAsync("the PointerFileEntry for BinaryFile \"File90.txt\" is marked as deleted", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 185
 await testRunner.ThenAsync("a PointerFileEntry for a BinaryFile \"subdir 2\\File91.txt\" is marked as exists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 186
 await testRunner.ThenAsync("BinaryFile \"subdir 2\\File91.txt\" has a PointerFile and the PointerFileEntry is ma" +
                        "rked as exists", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Mass tier update")]
        public async System.Threading.Tasks.Task MassTierUpdate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Mass tier update", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 188
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 189
 await testRunner.GivenAsync("a BinaryFile \"File100.txt\" of size \"ABOVE_ARCHIVE_TIER_LIMIT\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 190
 await testRunner.WhenAsync("archived to the Archive tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 191
 await testRunner.ThenAsync("the Chunks for BinaryFile \"File100.txt\" are in the Archive tier", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 193
 await testRunner.GivenAsync("a BinaryFile \"File101.txt\" of size \"APPROX_TEN_CHUNKS\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 194
 await testRunner.WhenAsync("deduplicated and archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 196
 await testRunner.ThenAsync("the Chunks for BinaryFile \"File100.txt\" are in the Archive tier", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 197
 await testRunner.ThenAsync("the Chunks for BinaryFile \"File101.txt\" are in the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 199
 await testRunner.WhenAsync("archived to the Cold tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 200
 await testRunner.ThenAsync("the Chunks for BinaryFile \"File100.txt\" are in the Archive tier", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 202
 await testRunner.ThenAsync("the Chunks for BinaryFile \"File101.txt\" are in the Cold tier", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 203
 await testRunner.ThenAsync("the ChunkEntry for BinaryFile \"File101.txt\" is in the NULL tier", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Corrupt Pointer")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public async System.Threading.Tasks.Task CorruptPointer()
        {
            string[] tagsOfScenario = new string[] {
                    "todo"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Corrupt Pointer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 206
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non Matching Pointer")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public async System.Threading.Tasks.Task NonMatchingPointer()
        {
            string[] tagsOfScenario = new string[] {
                    "todo"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Non Matching Pointer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 217
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Stale Pointer")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public async System.Threading.Tasks.Task StalePointer()
        {
            string[] tagsOfScenario = new string[] {
                    "todo"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Stale Pointer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 241
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update DateTime of a File or Pointer")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public async System.Threading.Tasks.Task UpdateDateTimeOfAFileOrPointer()
        {
            string[] tagsOfScenario = new string[] {
                    "todo"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Update DateTime of a File or Pointer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 254
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete a Pointer, archive, pointer is recreated")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public async System.Threading.Tasks.Task DeleteAPointerArchivePointerIsRecreated()
        {
            string[] tagsOfScenario = new string[] {
                    "todo"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Delete a Pointer, archive, pointer is recreated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 257
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Modify a binary with/without fasthash")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public async System.Threading.Tasks.Task ModifyABinaryWithWithoutFasthash()
        {
            string[] tagsOfScenario = new string[] {
                    "todo"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Modify a binary with/without fasthash", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 260
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
