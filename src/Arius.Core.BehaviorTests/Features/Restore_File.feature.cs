// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Arius.Core.BehaviorTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Restore File")]
    public partial class RestoreFileFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Restore_File.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Restore File", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 3
#line hidden
#line 4
    await testRunner.GivenAsync("a clean archive directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
            Reqnroll.Table table2 = new Reqnroll.Table(new string[] {
                        "RelativeName",
                        "Size",
                        "SourceRelativeName"});
            table2.AddRow(new string[] {
                        "dir1/wouter.txt",
                        "15 KB",
                        ""});
            table2.AddRow(new string[] {
                        "dir2/joke.pdf",
                        "BELOW_ARCHIVE_TIER_LIMIT",
                        ""});
            table2.AddRow(new string[] {
                        "taxes.doc",
                        "",
                        "dir1/wouter.txt"});
#line 5
    await testRunner.WhenAsync("the following BinaryFiles are archived to Cool tier:", ((string)(null)), table2, "When ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Restore a deduplicated file")]
        [NUnit.Framework.CategoryAttribute("restore")]
        [NUnit.Framework.CategoryAttribute("dedup")]
        public async System.Threading.Tasks.Task RestoreADeduplicatedFile()
        {
            string[] tagsOfScenario = new string[] {
                    "restore",
                    "dedup"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Restore a deduplicated file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
await this.FeatureBackgroundAsync();
#line hidden
#line 14
    await testRunner.GivenAsync("a BinaryFile \"File200.txt\" of size \"APPROX_TEN_CHUNKS\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 15
    await testRunner.WhenAsync("deduplicated and archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
    await testRunner.GivenAsync("a clean restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 18
    await testRunner.WhenAsync("restore --synchronize --download", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
    await testRunner.ThenAsync("all BinaryFiles are restored successfully", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Synchronization removes obsolete pointers but leaves binaryfiles intact")]
        [NUnit.Framework.CategoryAttribute("restore")]
        public async System.Threading.Tasks.Task SynchronizationRemovesObsoletePointersButLeavesBinaryfilesIntact()
        {
            string[] tagsOfScenario = new string[] {
                    "restore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Synchronization removes obsolete pointers but leaves binaryfiles intact", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
await this.FeatureBackgroundAsync();
#line hidden
#line 24
    await testRunner.GivenAsync("a BinaryFile \"File2.txt\" of size \"BELOW_ARCHIVE_TIER_LIMIT\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 25
    await testRunner.WhenAsync("archived to the Cool tier", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 26
    await testRunner.GivenAsync("a clean restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 27
    await testRunner.GivenAsync("a random PointerFile for BinaryFile \"test.txt\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 28
    await testRunner.GivenAsync("a random BinaryFile \"profile.jpg\"", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 29
    await testRunner.WhenAsync("restore --synchronize", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
    await testRunner.ThenAsync("only the BinaryFile \"profile.jpg\" is present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 34
    await testRunner.ThenAsync("all PointerFiles are restored successfully", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 36
    await testRunner.ThenAsync("the PointerFile for BinaryFile \"test.txt\" does not exist", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Synchronize and download a file")]
        public async System.Threading.Tasks.Task SynchronizeAndDownloadAFile()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Synchronize and download a file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
await this.FeatureBackgroundAsync();
#line hidden
#line 40
    await testRunner.GivenAsync("a clean restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 42
    await testRunner.WhenAsync("restore relativename \"dir1/wouter.txt\"", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
    await testRunner.ThenAsync("only the BinaryFile \"dir1/wouter.txt\" is present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Synchronize a file")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public async System.Threading.Tasks.Task SynchronizeAFile()
        {
            string[] tagsOfScenario = new string[] {
                    "todo"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Synchronize a file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
await this.FeatureBackgroundAsync();
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Download a file")]
        [NUnit.Framework.CategoryAttribute("todo")]
        public async System.Threading.Tasks.Task DownloadAFile()
        {
            string[] tagsOfScenario = new string[] {
                    "todo"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Download a file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
await this.FeatureBackgroundAsync();
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
