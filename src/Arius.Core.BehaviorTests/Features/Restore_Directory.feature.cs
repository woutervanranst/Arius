// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Arius.Core.BehaviorTests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Restore Directory")]
    public partial class RestoreDirectoryFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Restore_Directory.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Restore Directory", @"A short summary of the feature

TODO / BACKLOG
* empty dir
* remote with isdeleted and local present > should be deleted
* remote with !isdeleted and local not present > should be created
* also in subdirectories
* in ariusfile : de verschillende extensions
* al 1 file lokaal > kopieert de rest
* directory more than 2 deep without other files
*  download > BinaryFiles exist s> don't download all
* restore naar directory waar al andere bestanden (binaries) instaan -< are not touched (dan moet ge maa rnaar ne lege restoren)
* restore a seoncd time without any changes
* dedup / chunks weg", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 19
#line hidden
#line 20
    await testRunner.GivenAsync("a clean archive directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
            Reqnroll.Table table1 = new Reqnroll.Table(new string[] {
                        "RelativeName",
                        "Size",
                        "SourceRelativeName"});
            table1.AddRow(new string[] {
                        "dir1\\wouter.txt",
                        "15 KB",
                        ""});
            table1.AddRow(new string[] {
                        "dir2\\joke.pdf",
                        "BELOW_ARCHIVE_TIER_LIMIT",
                        ""});
            table1.AddRow(new string[] {
                        "taxes.doc",
                        "",
                        "dir1\\wouter.txt"});
#line 21
    await testRunner.WhenAsync("the following BinaryFiles are archived to Cool tier:", ((string)(null)), table1, "When ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Synchronize and download a directory")]
        public async System.Threading.Tasks.Task SynchronizeAndDownloadADirectory()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Synchronize and download a directory", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
await this.FeatureBackgroundAsync();
#line hidden
#line 30
    await testRunner.GivenAsync("a clean restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 31
 await testRunner.WhenAsync("restore --synchronize --download --keepPointers", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
    await testRunner.ThenAsync("all BinaryFiles are restored successfully", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 33
    await testRunner.ThenAsync("all PointerFiles are restored successfully", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Synchronize a directory and keep pointers")]
        public async System.Threading.Tasks.Task SynchronizeADirectoryAndKeepPointers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Synchronize a directory and keep pointers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
await this.FeatureBackgroundAsync();
#line hidden
#line 38
    await testRunner.GivenAsync("a clean restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 39
    await testRunner.WhenAsync("restore --synchronize --keepPointers", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
    await testRunner.ThenAsync("all PointerFiles are restored successfully", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 41
    await testRunner.ThenAsync("no BinaryFiles are present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Synchronize a directory and do not keep pointers")]
        public async System.Threading.Tasks.Task SynchronizeADirectoryAndDoNotKeepPointers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Synchronize a directory and do not keep pointers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
await this.FeatureBackgroundAsync();
#line hidden
#line 46
    await testRunner.GivenAsync("a clean restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 47
    await testRunner.WhenAsync("restore --synchronize", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 48
    await testRunner.ThenAsync("all PointerFiles are restored successfully", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 49
    await testRunner.ThenAsync("no BinaryFiles are present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Synchronize and download a directory and do not keep pointers")]
        public async System.Threading.Tasks.Task SynchronizeAndDownloadADirectoryAndDoNotKeepPointers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Synchronize and download a directory and do not keep pointers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
await this.FeatureBackgroundAsync();
#line hidden
#line 53
    await testRunner.GivenAsync("a clean restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 54
    await testRunner.WhenAsync("restore --synchronize --download", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
    await testRunner.ThenAsync("all BinaryFiles are restored successfully", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 56
    await testRunner.ThenAsync("no PointerFiles are present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Selective restore: Download a directory and keep pointers")]
        public async System.Threading.Tasks.Task SelectiveRestoreDownloadADirectoryAndKeepPointers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Selective restore: Download a directory and keep pointers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
await this.FeatureBackgroundAsync();
#line hidden
#line 61
    await testRunner.GivenAsync("a clean restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 62
    await testRunner.WhenAsync("restore --download --keepPointers", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 63
    await testRunner.ThenAsync("no PointerFiles are present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 64
    await testRunner.ThenAsync("no BinaryFiles are present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 66
    await testRunner.WhenAsync("copy the PointerFile of BinaryFile \"dir1\\wouter.txt\" to the restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
    await testRunner.WhenAsync("restore --download --keepPointers", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 68
    await testRunner.ThenAsync("only the PointerFile for BinaryFile \"dir1\\wouter.txt\" is present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 69
    await testRunner.ThenAsync("only the BinaryFile \"dir1\\wouter.txt\" is present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Selective restore: Download a directory and do not keep pointers")]
        public async System.Threading.Tasks.Task SelectiveRestoreDownloadADirectoryAndDoNotKeepPointers()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Selective restore: Download a directory and do not keep pointers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
await this.FeatureBackgroundAsync();
#line hidden
#line 74
    await testRunner.GivenAsync("a clean restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 75
    await testRunner.WhenAsync("restore --download", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 76
    await testRunner.ThenAsync("no PointerFiles are present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 77
    await testRunner.ThenAsync("no BinaryFiles are present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 79
    await testRunner.WhenAsync("copy the PointerFile of BinaryFile \"dir1\\wouter.txt\" to the restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 80
    await testRunner.WhenAsync("restore --download", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 81
    await testRunner.ThenAsync("only the BinaryFile \"dir1\\wouter.txt\" is present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 82
    await testRunner.ThenAsync("no PointerFiles are present", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Restore without synchronize and without download")]
        public async System.Threading.Tasks.Task RestoreWithoutSynchronizeAndWithoutDownload()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Restore without synchronize and without download", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
await this.FeatureBackgroundAsync();
#line hidden
#line 86
    await testRunner.GivenAsync("a clean restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 87
    await testRunner.WhenAsync("restore successful", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Download a file of which the binary is already restored")]
        public async System.Threading.Tasks.Task DownloadAFileOfWhichTheBinaryIsAlreadyRestored()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Download a file of which the binary is already restored", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
await this.FeatureBackgroundAsync();
#line hidden
#line 92
    await testRunner.GivenAsync("a clean restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 93
    await testRunner.WhenAsync("copy the PointerFile of BinaryFile \"dir1\\wouter.txt\" to the restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 94
    await testRunner.WhenAsync("copy the PointerFile of BinaryFile \"taxes.doc\" to the restore directory", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 95
    await testRunner.WhenAsync("restore --download", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 96
    await testRunner.ThenAsync("the BinaryFile \"dir1\\wouter.txt\" is restored from online tier", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 97
    await testRunner.ThenAsync("the BinaryFile \"taxes.doc\" is restored from local", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
