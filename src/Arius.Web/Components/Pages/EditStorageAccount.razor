@page "/edit-storage-account/{id:int}"
@using Arius.Web.Application
@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.Inputs
@inject RepositoryService RepositoryService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Edit Storage Account</h3>

<SfDataForm ID="StorageAccountForm"
            Model="@storageAccountViewModel"
            OnValidSubmit="HandleValidSubmitAsync">
    <FormValidator>
        <DataAnnotationsValidator/>
    </FormValidator>
    <FormItems>
        <FormItem Field="@nameof(storageAccountViewModel.AccountName)" EditorType="FormEditorType.TextBox" IsEnabled="false"></FormItem>
        
        
        @* https://support.syncfusion.com/kb/article/14948/how-to-add-a-password-toggle-icon-to-the-sftextbox-component-with-syncfusion-blazor *@
        <FormItem Field="@nameof(storageAccountViewModel.AccountKey)">
            <Template>
                <label for="accountKeyTextBox" class="e-form-label">Account Key</label>
                <SfTextBox ID="accountKeyTextBox"
                           @bind-Value="storageAccountViewModel.AccountKey"
                           @ref="AccountKeyTextBox"
                           Type="@AccountKeyTextBoxType"
                           Created="@AddIconAsync">
                </SfTextBox>
                @* </div> *@
            </Template>
        </FormItem>
         
    </FormItems>
</SfDataForm>

@code {
    private StorageAccountViewModel storageAccountViewModel = new();
    
    [Parameter] 
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var storageAccount = await RepositoryService.GetStorageAccountByIdAsync(Id);
        storageAccountViewModel = storageAccount.ToViewModel();
    }

    private async Task HandleValidSubmitAsync()
    {
        var storageAccount = storageAccountViewModel.ToDomainModel();
        await RepositoryService.UpdateStorageAccountAsync(storageAccount);
        Navigation.NavigateTo("/repositories");
    }


    // Account Key Password field

    SfTextBox AccountKeyTextBox;
    bool      IsPasswordVisible = false;
    InputType AccountKeyTextBoxType => IsPasswordVisible ? InputType.Text : InputType.Password;

    public async Task AddIconAsync()
    {
        await AccountKeyTextBox.AddIconAsync("append", "fas fa-eye-slash", new Dictionary<string, object>() { { "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, PasswordClickAsync) } });
    }
    
    public async Task PasswordClickAsync()
    {
        await JSRuntime.InvokeAsync<object>("showhidePassword", "accountKeyTextBox");
        IsPasswordVisible = !IsPasswordVisible;
    }
}
