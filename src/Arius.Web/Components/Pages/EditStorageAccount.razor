@page "/edit-storage-account/{id:int}"
@using Arius.Web.Application
@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.Inputs
@inject RepositoryService RepositoryService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Edit Storage Account</h3>

<SfDataForm ID="StorageAccountForm"
            Model="@storageAccountViewModel"
            OnValidSubmit="HandleValidSubmit">
    <FormValidator>
        <DataAnnotationsValidator/>
    </FormValidator>
    <FormItems>
        <FormItem Field="@nameof(storageAccountViewModel.AccountName)" EditorType="FormEditorType.TextBox" IsEnabled="false"></FormItem>
        
        @* https://support.syncfusion.com/kb/article/14948/how-to-add-a-password-toggle-icon-to-the-sftextbox-component-with-syncfusion-blazor *@
        
        <FormItem Field="@nameof(storageAccountViewModel.AccountKey)" LabelText="haha">
            <Template>
                @* <div class="e-float-input e-control-wrapper"> *@
                <label for="passwordBox" class="e-form-label">Account Key</label>
                <SfTextBox ID="passwordBox"
                           @bind-Value="storageAccountViewModel.AccountKey"
                           @ref="TextBoxObj"
                           Type="@TextBoxType"
                           Created="@Created">
                </SfTextBox>
                @* </div> *@
            </Template>
        </FormItem>
         
    </FormItems>
</SfDataForm>

<script>
    function showhidePassword(textBoxId) {
        const textBox = document.getElementById(textBoxId);
        const icon = textBox.parentElement.querySelector('.e-input-group-icon');
        icon.classList.toggle('fa-eye');
        icon.classList.toggle('fa-eye-slash');
    }
</script>

@code {
    private StorageAccountViewModel storageAccountViewModel = new();
    
    [Parameter]
    public int            Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var storageAccount = await RepositoryService.GetStorageAccountByIdAsync(Id);
        storageAccountViewModel = storageAccount.ToViewModel();
    }

    private async Task HandleValidSubmit()
    {
        var storageAccount = storageAccountViewModel.ToDomainModel();
        await RepositoryService.UpdateStorageAccountAsync(storageAccount);
        Navigation.NavigateTo("/repositories");
    }



    SfTextBox TextBoxObj;
    bool      IsPasswordVisible = false;
    InputType TextBoxType => IsPasswordVisible ? InputType.Text : InputType.Password;

    public async Task Created()
    {
        await TextBoxObj.AddIconAsync("append", "fas fa-eye-slash", new Dictionary<string, object>() { { "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, PasswordClick) } });
    }

    public async Task PasswordClick()
    {
        await JSRuntime.InvokeAsync<object>("showhidePassword", "passwordBox");
        IsPasswordVisible = !IsPasswordVisible;
    }
}
