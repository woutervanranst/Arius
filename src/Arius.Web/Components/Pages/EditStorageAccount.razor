@page "/edit-storage-account/{id:int}"
@using Arius.Web.Application
@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Buttons
@inject RepositoryService RepositoryService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>Edit Storage Account</h3>

<SfDataForm ID="StorageAccountForm"
            Model="@storageAccountViewModel"
            OnValidSubmit="HandleValidSubmitAsync">
    <FormValidator>
        <DataAnnotationsValidator/>
    </FormValidator>
    <FormItems>
        <FormItem Field="@nameof(storageAccountViewModel.AccountName)" EditorType="FormEditorType.TextBox" IsEnabled="false"></FormItem>
        
        <FormItem Field="@nameof(storageAccountViewModel.AccountKey)">
            <Template>
                <label for="accountKeyTextBox" class="e-form-label">Account Key</label>
                <SfTextBox ID="accountKeyTextBox"
                           @bind-Value="storageAccountViewModel.AccountKey"
                           @ref="AccountKeyTextBox"
                           Type="@AccountKeyTextBoxType"
                           Created="@AddIconAsync">
                </SfTextBox>
                @* </div> *@
            </Template>
        </FormItem>
    </FormItems>
    <FormButtons>
        <SfButton type="submit" CssClass="e-success">Save</SfButton>
    </FormButtons>
</SfDataForm>

<div class="col-lg-12 control-section toast-default-section">
    <SfToast @ref="toastObj" Timeout="5000">
        @* <ToastEvents OnClose="OnToastClose" /> *@
        <ToastPosition X="Right" Y="Top"></ToastPosition>
    </SfToast>
</div>

<style>
    .e-data-form .e-btn.e-success {
        margin-right: 5px; 
    }
</style>

@code {
    private StorageAccountViewModel storageAccountViewModel = new();
    private SfToast                 toastObj;

    [Parameter] 
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var storageAccount = await RepositoryService.GetStorageAccountByIdAsync(Id);
        storageAccountViewModel = storageAccount.ToViewModel();
    }

    private async Task HandleValidSubmitAsync()
    {
        var storageAccount = storageAccountViewModel.ToDomainModel();
        var result = await RepositoryService.UpdateStorageAccountAsync(storageAccount);

        if (!result.Success)
        {
            await ShowToast(result.ErrorMessage, "Error", "e-toast-danger", "fa fa-warning");
        }
        else
        {
            Navigation.NavigateTo("/repositories");
        }
    }

    private async Task ShowToast(string content, string title, string cssClass, string icon)
    {
        var toastModel = new ToastModel
        {
            Title    = title,
            Content  = content,
            CssClass = cssClass,
            Icon     = icon
        };
        await toastObj.ShowAsync(toastModel);
    }


    // Account Key Password field ref https://support.syncfusion.com/kb/article/14948/how-to-add-a-password-toggle-icon-to-the-sftextbox-component-with-syncfusion-blazor

    SfTextBox AccountKeyTextBox;
    bool      IsPasswordVisible = false;
    InputType AccountKeyTextBoxType => IsPasswordVisible ? InputType.Text : InputType.Password;

    public async Task AddIconAsync()
    {
        await AccountKeyTextBox.AddIconAsync("append", "fas fa-eye-slash", new Dictionary<string, object>() { { "onclick", EventCallback.Factory.Create<MouseEventArgs>(this, PasswordClickAsync) } });
    }
    
    public async Task PasswordClickAsync()
    {
        await JSRuntime.InvokeAsync<object>("showhidePassword", "accountKeyTextBox");
        IsPasswordVisible = !IsPasswordVisible;
    }
}
