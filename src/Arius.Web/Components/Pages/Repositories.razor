@page "/repositories"
@using Arius.Web.Application
@using Arius.Web.Core
@inject RepositoryService RepositoryService
@inject NavigationManager Navigation

<h3>Storage Accounts</h3>

<button class="btn btn-primary" @onclick="AddStorageAccount">Add Storage Account</button>

@if (storageAccounts != null && storageAccounts.Any())
{
    <table class="table table-bordered mt-3">
        <thead>
            <tr>
                <th>Account Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var account in storageAccounts)
            {
                <tr>
                    <td>@account.AccountName</td>
                    <td>
                        <button class="btn btn-secondary btn-sm" @onclick="() => EditStorageAccount(account.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteStorageAccount(account.Id)">Delete</button>
                        <button class="btn btn-success btn-sm" @onclick="() => AddRepository(account.Id)">Add Repository</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No storage accounts available.</p>
}

<h3>Repositories</h3>

@if (repositories != null && repositories.Any())
{
    <table class="table table-bordered mt-3">
        <thead>
        <tr>
            <th>Storage Account</th>
            <th>Container Name</th>
            <th>Local Path</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
            @foreach (var repository in repositories)
            {
                <tr>
                    <td>@repository.StorageAccount.AccountName</td>
                    <td>@repository.ContainerName</td>
                    <td>@repository.LocalPath</td>
                    <td>
                        <button class="btn btn-secondary btn-sm" @onclick="() => EditRepository(repository.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteRepository(repository.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No repositories available.</p>
}

@code {
    private List<StorageAccount> storageAccounts;
    private List<Repository> repositories;

    protected override async Task OnInitializedAsync()
    {
        storageAccounts = await RepositoryService.GetStorageAccountsAsync();
        repositories = await RepositoryService.GetRepositoriesAsync();
    }

    private void AddStorageAccount()
    {
        Navigation.NavigateTo("/add-storage-account");
    }

    private void EditStorageAccount(int id)
    {
        Navigation.NavigateTo($"/edit-storage-account/{id}");
    }

    private async Task DeleteStorageAccount(int id)
    {
        await RepositoryService.DeleteStorageAccountAsync(id);
        storageAccounts = await RepositoryService.GetStorageAccountsAsync();
    }

    private void AddRepository(int storageAccountId)
    {
        Navigation.NavigateTo($"/add-repository/{storageAccountId}");
    }

    private void EditRepository(int id)
    {
        Navigation.NavigateTo($"/edit-repository/{id}");
    }

    private async Task DeleteRepository(int id)
    {
        await RepositoryService.DeleteRepositoryAsync(id);
        repositories = await RepositoryService.GetRepositoriesAsync();
    }
}
