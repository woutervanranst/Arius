@page "/add-repository/{storageAccountId:int}"
@using Arius.Core.Domain.Storage
@using Arius.Web.Application
@using Arius.Web.Domain
@inject RepositoryService RepositoryService
@inject NavigationManager Navigation

<h3>Add CloudRepository</h3>

<EditForm Model="repository" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="localPath">Local Path</label>
        <InputText id="localPath" class="form-control" @bind-Value="repository.LocalPath" />
    </div>

    <div class="form-group">
        <label for="containerName">Container Name</label>
        <InputText id="containerName" class="form-control" @bind-Value="repository.ContainerName" />
    </div>

    <div class="form-group">
        <label for="passphrase">Passphrase</label>
        <InputText id="passphrase" class="form-control" @bind-Value="repository.Passphrase" />
    </div>

    <div class="form-group">
        <label for="tier">Tier</label>
        <InputSelect id="tier" class="form-control" @bind-Value="repository.Tier">
            @foreach (var tier in Enum.GetValues(typeof(StorageTier)))
            {
                <option value="@tier">@tier</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="removeLocal">Remove Local</label>
        <InputCheckbox id="removeLocal" @bind-Value="repository.RemoveLocal" />
    </div>

    <div class="form-group">
        <label for="dedup">Dedup</label>
        <InputCheckbox id="dedup" @bind-Value="repository.Dedup" />
    </div>

    <div class="form-group">
        <label for="fastHash">Fast Hash</label>
        <InputCheckbox id="fastHash" @bind-Value="repository.FastHash" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
    private            Repository repository = new();
    [Parameter] public int        StorageAccountId { get; set; }

    protected override void OnInitialized()
    {
        repository.StorageAccountId = StorageAccountId;
    }

    private async Task HandleValidSubmit()
    {
        await RepositoryService.AddRepositoryAsync(repository);
        Navigation.NavigateTo("/repositories");
    }
}
