@startuml

interface IStorageAccountFactory {
    + IStorageAccount GetStorageAccount(StorageAccountOptions storageAccountOptions)
    + IStorageAccount GetStorageAccount(StorageAccountOptions storageAccountOptions, int maxRetries, TimeSpan timeout)
    + IContainer GetContainer(ContainerOptions containerOptions)
    + IRemoteRepository GetRemoteRepository(IStorageAccountFactory storageAccountFactory, RemoteRepositoryOptions remoteRepositoryOptions)
}


interface IStorageAccount {
    + IContainer GetContainer(string containerName)
    + IContainer GetContainer(ContainerOptions containerOptions)
    + IAsyncEnumerable<IContainer> GetContainers(CancellationToken cancellationToken = default)
}

interface IContainer {
    + IStorageAccount StorageAccount
    + string Name
    + IRemoteRepository GetRemoteRepository(RemoteRepositoryOptions remoteRepositoryOptions)
}

interface IRemoteRepository {
    + IRemoteStateRepository GetRemoteStateRepository()
    + Task UploadBinaryFileAsync(IBinaryFileWithHash file, Func<long, StorageTier> effectiveTier, CancellationToken cancellationToken = default)
    + Task SetBinaryStorageTierAsync(Hash hash, StorageTier effectiveTier, CancellationToken cancellationToken = default)
}

interface IRemoteStateRepository {
    + IAsyncEnumerable<RepositoryVersion> GetStateDatabaseVersions()
    + Task<ILocalStateRepository> GetLocalStateRepositoryAsync(RepositoryVersion? version = null)
    + Task<ILocalStateRepository> CreateNewLocalStateRepositoryAsync(RepositoryVersion version, RepositoryVersion? basedOn = null)
    + Task<bool> SaveChangesAsync(ILocalStateRepository localStateRepository)
}

interface ILocalStateRepository {
    + IStateDatabaseFile StateDatabaseFile
    + RepositoryVersion Version
    + bool HasChanges
    + void Vacuum()
    + IEnumerable<BinaryProperties> GetBinaryProperties()
    + long CountBinaryProperties()
    + void AddBinary(BinaryProperties bp)
    + bool BinaryExists(Hash binaryFileHash)
    + void UpdateBinaryStorageTier(Hash hash, StorageTier effectiveTier)
    + IEnumerable<PointerFileEntry> GetPointerFileEntries()
    + long CountPointerFileEntries()
    + void AddPointerFileEntry(PointerFileEntry pfe)
    + void DeletePointerFileEntry(PointerFileEntry pfe)
    + SizeMetrics GetSizes()
}

IStorageAccountFactory --> IStorageAccount : GetStorageAccount()
IStorageAccountFactory --> IContainer : GetContainer()

IStorageAccount --> IContainer : GetContainer()
IStorageAccount --> IContainer : GetContainers()

IContainer --> IRemoteRepository : GetRemoteRepository()

IRemoteRepository --> IRemoteStateRepository : GetRemoteStateRepository()

IRemoteStateRepository --> ILocalStateRepository : GetLocalStateRepositoryAsync()
IRemoteStateRepository --> ILocalStateRepository : CreateNewLocalStateRepositoryAsync()

@enduml
