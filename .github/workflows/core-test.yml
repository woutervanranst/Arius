name: Arius.Core - Test Suite

on:
  # Runs on every push to Arius.Core
  push:
    paths: 
      - 'src/Arius.Core/**'

jobs:
  test:
    name: Run Test Suite on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    defaults:
      run:
        working-directory: ./src

    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        submodules: true # Check out WouterVanRanst.Utils

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.x

    # Cache NuGet packages
    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.nuget/packages
          !~/.nuget/packages/**/project.assets.json
          !~/.nuget/packages/**/project.nuget.cache
        key: ${{ runner.os }}-dotnet-${{ hashFiles('**/Arius.Core.csproj') }}
        restore-keys: |
          ${{ runner.os }}-dotnet-

    - name: Install dotCover Global Tool
      run: dotnet tool install --global JetBrains.dotCover.GlobalTool

    - name: Test
      run: |
        dotnet dotcover test Arius.Core.BehaviorTests --output=TestResults/CoverageReport/BehaviorTestsCoverageResult.dcvr
        dotnet dotcover test Arius.Core.Tests         --output=TestResults/CoverageReport/TestsCoverageResult.dcvr
      env:
        ARIUS_ACCOUNT_NAME: ariusci
        ARIUS_ACCOUNT_KEY: ${{ secrets.ARIUS_ACCOUNT_KEY }}

    - name: Merge coverage reports
      run: |
        dotnet dotcover merge --source=TestResults/CoverageReport/BehaviorTestsCoverageResult.dcvr;TestResults/CoverageReport/TestsCoverageResult.dcvr --output=TestResults/CoverageReport/MergedCoverageResult.dcvr

        # dotnet tool install --global dotnet-reportgenerator-globaltool
        # reportgenerator "-reports:./TestResults/Arius.Core.BehaviorTests.opencover.xml;./TestResults/Arius.Core.Tests.opencover.xml" "-targetdir:./TestResults/CoverageReport" -reporttypes:Cobertura
        # mv ./TestResults/CoverageReport/Cobertura.xml ./TestResults/MergedCoverage.opencover.xml
    
    - name: Generate dotCover XML Report
      run: |
        dotnet dotcover report --source=TestResults/CoverageReport/CoverageResult.dcvr --output=TestResults/CoverageReport/Coverage.xml --reportType=DetailedXML
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./TestResults/CoverageReport/Coverage.xml
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


    # - name: Upload coverage reports to Codecov
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: ./TestResults/MergedCoverage.opencover.xml
    #   env:
    #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
